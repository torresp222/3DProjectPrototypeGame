//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/BowzanGaming/FinalCharacterController/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace BowzanGaming.FinalCharacterController
{
    public partial class @PlayerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerLocomotionMap"",
            ""id"": ""610f73c4-1607-43e9-af47-e3fbacba1526"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""ab8bc41e-608c-4de8-a8a2-5a0fcac267ab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""512b0156-45bb-4de2-a8f1-282098aa992f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ToggleSprint"",
                    ""type"": ""Button"",
                    ""id"": ""c5e25b23-15fd-40a9-99a9-d2585f202764"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d04958bf-505f-4bb6-8815-0f56aa6be249"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleWalk"",
                    ""type"": ""Button"",
                    ""id"": ""2f180c98-870d-4582-9236-a3ebb298cff8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""02852b40-34da-4ed9-87d8-8061f05892dd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""acb826da-89c7-4a13-8c11-5ae94b9021ee"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""91967df0-8d45-433a-8c45-707cda06394b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8fa7b56a-edc1-42ff-b77a-0114887a5492"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9c5398f5-4f07-4c54-a10e-e05cf0d18291"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left Stick"",
                    ""id"": ""ac88dbd1-b958-4de6-8d47-7be447bac8e6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e26b196e-a889-445f-90ad-43fd683ec586"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""79c6506b-4982-4aeb-b39a-64241d5b9f23"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5a45a937-353b-4ce1-b00c-b95320d09ee0"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1ee96082-b4b3-479d-8019-5af7c29b9d26"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6881208e-8885-48b6-b828-e4491e96a725"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2139915-786c-4c16-a118-e6d3ce42bbf5"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleSprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0802d9a-eee4-4fa2-8728-32830b07172e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d9cbead-e52a-45a0-b38f-fb366a83460b"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleWalk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ThirdPersonMap"",
            ""id"": ""d78bd6a8-68ba-4900-abdb-687d4e967042"",
            ""actions"": [
                {
                    ""name"": ""ScrollCamera"",
                    ""type"": ""Value"",
                    ""id"": ""4b70f3bc-f81b-4de5-a706-72fce041371d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bdaf39d8-83a0-42d5-a57a-73ddb6af2a51"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerActionMap"",
            ""id"": ""c1534c7c-6ff1-4adb-8456-46cc3ac7f34c"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""558a9788-637b-4eb0-85da-6ceee046c229"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gather"",
                    ""type"": ""Button"",
                    ""id"": ""6a50a230-601b-4742-b893-0c037477daa4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""9ee20d34-e8a9-4608-9986-4b5798f36a43"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldThrow"",
                    ""type"": ""Button"",
                    ""id"": ""a44efe86-a810-438b-8e21-d1ef478ae585"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""81d50aae-0d07-4216-84e4-6ebe540549d7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe31b154-90f0-4b13-8f48-6bf6455afad6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gather"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc79c827-cf8b-4719-9e26-0d36dab1255c"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96fed8bd-af15-4fb0-a883-45dfcafa56d6"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldThrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerSoulCombatMap"",
            ""id"": ""16d6099d-84b4-439a-af58-a6298145d4a4"",
            ""actions"": [
                {
                    ""name"": ""Spell"",
                    ""type"": ""Button"",
                    ""id"": ""0dd43436-bff7-4539-a977-3d9deb709b24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BoostDefense"",
                    ""type"": ""Button"",
                    ""id"": ""da4a303a-cb41-44de-8d05-e8a3855fb16a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BoostAttack"",
                    ""type"": ""Button"",
                    ""id"": ""27c42b00-c525-4feb-b991-6ab0c97c0434"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""18050a82-ba83-41b2-b4c2-ba8645af327a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b4ccd99-c086-456f-8cf6-84a95be38b8e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BoostDefense"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ab4dbb3-8940-4c77-a871-59465e0ec968"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BoostAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerLocomotionMap
            m_PlayerLocomotionMap = asset.FindActionMap("PlayerLocomotionMap", throwIfNotFound: true);
            m_PlayerLocomotionMap_Movement = m_PlayerLocomotionMap.FindAction("Movement", throwIfNotFound: true);
            m_PlayerLocomotionMap_Look = m_PlayerLocomotionMap.FindAction("Look", throwIfNotFound: true);
            m_PlayerLocomotionMap_ToggleSprint = m_PlayerLocomotionMap.FindAction("ToggleSprint", throwIfNotFound: true);
            m_PlayerLocomotionMap_Jump = m_PlayerLocomotionMap.FindAction("Jump", throwIfNotFound: true);
            m_PlayerLocomotionMap_ToggleWalk = m_PlayerLocomotionMap.FindAction("ToggleWalk", throwIfNotFound: true);
            // ThirdPersonMap
            m_ThirdPersonMap = asset.FindActionMap("ThirdPersonMap", throwIfNotFound: true);
            m_ThirdPersonMap_ScrollCamera = m_ThirdPersonMap.FindAction("ScrollCamera", throwIfNotFound: true);
            // PlayerActionMap
            m_PlayerActionMap = asset.FindActionMap("PlayerActionMap", throwIfNotFound: true);
            m_PlayerActionMap_Attack = m_PlayerActionMap.FindAction("Attack", throwIfNotFound: true);
            m_PlayerActionMap_Gather = m_PlayerActionMap.FindAction("Gather", throwIfNotFound: true);
            m_PlayerActionMap_Throw = m_PlayerActionMap.FindAction("Throw", throwIfNotFound: true);
            m_PlayerActionMap_HoldThrow = m_PlayerActionMap.FindAction("HoldThrow", throwIfNotFound: true);
            // PlayerSoulCombatMap
            m_PlayerSoulCombatMap = asset.FindActionMap("PlayerSoulCombatMap", throwIfNotFound: true);
            m_PlayerSoulCombatMap_Spell = m_PlayerSoulCombatMap.FindAction("Spell", throwIfNotFound: true);
            m_PlayerSoulCombatMap_BoostDefense = m_PlayerSoulCombatMap.FindAction("BoostDefense", throwIfNotFound: true);
            m_PlayerSoulCombatMap_BoostAttack = m_PlayerSoulCombatMap.FindAction("BoostAttack", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerLocomotionMap
        private readonly InputActionMap m_PlayerLocomotionMap;
        private List<IPlayerLocomotionMapActions> m_PlayerLocomotionMapActionsCallbackInterfaces = new List<IPlayerLocomotionMapActions>();
        private readonly InputAction m_PlayerLocomotionMap_Movement;
        private readonly InputAction m_PlayerLocomotionMap_Look;
        private readonly InputAction m_PlayerLocomotionMap_ToggleSprint;
        private readonly InputAction m_PlayerLocomotionMap_Jump;
        private readonly InputAction m_PlayerLocomotionMap_ToggleWalk;
        public struct PlayerLocomotionMapActions
        {
            private @PlayerControls m_Wrapper;
            public PlayerLocomotionMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_PlayerLocomotionMap_Movement;
            public InputAction @Look => m_Wrapper.m_PlayerLocomotionMap_Look;
            public InputAction @ToggleSprint => m_Wrapper.m_PlayerLocomotionMap_ToggleSprint;
            public InputAction @Jump => m_Wrapper.m_PlayerLocomotionMap_Jump;
            public InputAction @ToggleWalk => m_Wrapper.m_PlayerLocomotionMap_ToggleWalk;
            public InputActionMap Get() { return m_Wrapper.m_PlayerLocomotionMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerLocomotionMapActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerLocomotionMapActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerLocomotionMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerLocomotionMapActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @ToggleSprint.started += instance.OnToggleSprint;
                @ToggleSprint.performed += instance.OnToggleSprint;
                @ToggleSprint.canceled += instance.OnToggleSprint;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @ToggleWalk.started += instance.OnToggleWalk;
                @ToggleWalk.performed += instance.OnToggleWalk;
                @ToggleWalk.canceled += instance.OnToggleWalk;
            }

            private void UnregisterCallbacks(IPlayerLocomotionMapActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
                @ToggleSprint.started -= instance.OnToggleSprint;
                @ToggleSprint.performed -= instance.OnToggleSprint;
                @ToggleSprint.canceled -= instance.OnToggleSprint;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @ToggleWalk.started -= instance.OnToggleWalk;
                @ToggleWalk.performed -= instance.OnToggleWalk;
                @ToggleWalk.canceled -= instance.OnToggleWalk;
            }

            public void RemoveCallbacks(IPlayerLocomotionMapActions instance)
            {
                if (m_Wrapper.m_PlayerLocomotionMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerLocomotionMapActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerLocomotionMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerLocomotionMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerLocomotionMapActions @PlayerLocomotionMap => new PlayerLocomotionMapActions(this);

        // ThirdPersonMap
        private readonly InputActionMap m_ThirdPersonMap;
        private List<IThirdPersonMapActions> m_ThirdPersonMapActionsCallbackInterfaces = new List<IThirdPersonMapActions>();
        private readonly InputAction m_ThirdPersonMap_ScrollCamera;
        public struct ThirdPersonMapActions
        {
            private @PlayerControls m_Wrapper;
            public ThirdPersonMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @ScrollCamera => m_Wrapper.m_ThirdPersonMap_ScrollCamera;
            public InputActionMap Get() { return m_Wrapper.m_ThirdPersonMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ThirdPersonMapActions set) { return set.Get(); }
            public void AddCallbacks(IThirdPersonMapActions instance)
            {
                if (instance == null || m_Wrapper.m_ThirdPersonMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ThirdPersonMapActionsCallbackInterfaces.Add(instance);
                @ScrollCamera.started += instance.OnScrollCamera;
                @ScrollCamera.performed += instance.OnScrollCamera;
                @ScrollCamera.canceled += instance.OnScrollCamera;
            }

            private void UnregisterCallbacks(IThirdPersonMapActions instance)
            {
                @ScrollCamera.started -= instance.OnScrollCamera;
                @ScrollCamera.performed -= instance.OnScrollCamera;
                @ScrollCamera.canceled -= instance.OnScrollCamera;
            }

            public void RemoveCallbacks(IThirdPersonMapActions instance)
            {
                if (m_Wrapper.m_ThirdPersonMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IThirdPersonMapActions instance)
            {
                foreach (var item in m_Wrapper.m_ThirdPersonMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ThirdPersonMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ThirdPersonMapActions @ThirdPersonMap => new ThirdPersonMapActions(this);

        // PlayerActionMap
        private readonly InputActionMap m_PlayerActionMap;
        private List<IPlayerActionMapActions> m_PlayerActionMapActionsCallbackInterfaces = new List<IPlayerActionMapActions>();
        private readonly InputAction m_PlayerActionMap_Attack;
        private readonly InputAction m_PlayerActionMap_Gather;
        private readonly InputAction m_PlayerActionMap_Throw;
        private readonly InputAction m_PlayerActionMap_HoldThrow;
        public struct PlayerActionMapActions
        {
            private @PlayerControls m_Wrapper;
            public PlayerActionMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Attack => m_Wrapper.m_PlayerActionMap_Attack;
            public InputAction @Gather => m_Wrapper.m_PlayerActionMap_Gather;
            public InputAction @Throw => m_Wrapper.m_PlayerActionMap_Throw;
            public InputAction @HoldThrow => m_Wrapper.m_PlayerActionMap_HoldThrow;
            public InputActionMap Get() { return m_Wrapper.m_PlayerActionMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActionMapActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActionMapActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces.Add(instance);
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Gather.started += instance.OnGather;
                @Gather.performed += instance.OnGather;
                @Gather.canceled += instance.OnGather;
                @Throw.started += instance.OnThrow;
                @Throw.performed += instance.OnThrow;
                @Throw.canceled += instance.OnThrow;
                @HoldThrow.started += instance.OnHoldThrow;
                @HoldThrow.performed += instance.OnHoldThrow;
                @HoldThrow.canceled += instance.OnHoldThrow;
            }

            private void UnregisterCallbacks(IPlayerActionMapActions instance)
            {
                @Attack.started -= instance.OnAttack;
                @Attack.performed -= instance.OnAttack;
                @Attack.canceled -= instance.OnAttack;
                @Gather.started -= instance.OnGather;
                @Gather.performed -= instance.OnGather;
                @Gather.canceled -= instance.OnGather;
                @Throw.started -= instance.OnThrow;
                @Throw.performed -= instance.OnThrow;
                @Throw.canceled -= instance.OnThrow;
                @HoldThrow.started -= instance.OnHoldThrow;
                @HoldThrow.performed -= instance.OnHoldThrow;
                @HoldThrow.canceled -= instance.OnHoldThrow;
            }

            public void RemoveCallbacks(IPlayerActionMapActions instance)
            {
                if (m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActionMapActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActionMapActions @PlayerActionMap => new PlayerActionMapActions(this);

        // PlayerSoulCombatMap
        private readonly InputActionMap m_PlayerSoulCombatMap;
        private List<IPlayerSoulCombatMapActions> m_PlayerSoulCombatMapActionsCallbackInterfaces = new List<IPlayerSoulCombatMapActions>();
        private readonly InputAction m_PlayerSoulCombatMap_Spell;
        private readonly InputAction m_PlayerSoulCombatMap_BoostDefense;
        private readonly InputAction m_PlayerSoulCombatMap_BoostAttack;
        public struct PlayerSoulCombatMapActions
        {
            private @PlayerControls m_Wrapper;
            public PlayerSoulCombatMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Spell => m_Wrapper.m_PlayerSoulCombatMap_Spell;
            public InputAction @BoostDefense => m_Wrapper.m_PlayerSoulCombatMap_BoostDefense;
            public InputAction @BoostAttack => m_Wrapper.m_PlayerSoulCombatMap_BoostAttack;
            public InputActionMap Get() { return m_Wrapper.m_PlayerSoulCombatMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerSoulCombatMapActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerSoulCombatMapActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerSoulCombatMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerSoulCombatMapActionsCallbackInterfaces.Add(instance);
                @Spell.started += instance.OnSpell;
                @Spell.performed += instance.OnSpell;
                @Spell.canceled += instance.OnSpell;
                @BoostDefense.started += instance.OnBoostDefense;
                @BoostDefense.performed += instance.OnBoostDefense;
                @BoostDefense.canceled += instance.OnBoostDefense;
                @BoostAttack.started += instance.OnBoostAttack;
                @BoostAttack.performed += instance.OnBoostAttack;
                @BoostAttack.canceled += instance.OnBoostAttack;
            }

            private void UnregisterCallbacks(IPlayerSoulCombatMapActions instance)
            {
                @Spell.started -= instance.OnSpell;
                @Spell.performed -= instance.OnSpell;
                @Spell.canceled -= instance.OnSpell;
                @BoostDefense.started -= instance.OnBoostDefense;
                @BoostDefense.performed -= instance.OnBoostDefense;
                @BoostDefense.canceled -= instance.OnBoostDefense;
                @BoostAttack.started -= instance.OnBoostAttack;
                @BoostAttack.performed -= instance.OnBoostAttack;
                @BoostAttack.canceled -= instance.OnBoostAttack;
            }

            public void RemoveCallbacks(IPlayerSoulCombatMapActions instance)
            {
                if (m_Wrapper.m_PlayerSoulCombatMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerSoulCombatMapActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerSoulCombatMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerSoulCombatMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerSoulCombatMapActions @PlayerSoulCombatMap => new PlayerSoulCombatMapActions(this);
        public interface IPlayerLocomotionMapActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
            void OnToggleSprint(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnToggleWalk(InputAction.CallbackContext context);
        }
        public interface IThirdPersonMapActions
        {
            void OnScrollCamera(InputAction.CallbackContext context);
        }
        public interface IPlayerActionMapActions
        {
            void OnAttack(InputAction.CallbackContext context);
            void OnGather(InputAction.CallbackContext context);
            void OnThrow(InputAction.CallbackContext context);
            void OnHoldThrow(InputAction.CallbackContext context);
        }
        public interface IPlayerSoulCombatMapActions
        {
            void OnSpell(InputAction.CallbackContext context);
            void OnBoostDefense(InputAction.CallbackContext context);
            void OnBoostAttack(InputAction.CallbackContext context);
        }
    }
}
